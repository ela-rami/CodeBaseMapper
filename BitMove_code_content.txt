
BitMove.Client/BitMove.Client.csproj:
<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="8.0.11" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="8.0.11" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\BitMove.Shared\BitMove.Shared.csproj" />
  </ItemGroup>

  <ItemGroup>
    <ServiceWorker Include="wwwroot\service-worker.js" PublishedContent="wwwroot\service-worker.published.js" />
  </ItemGroup>

</Project>

BitMove.Client/Program.cs:
using BitMove.Client;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");

builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

await builder.Build().RunAsync();

BitMove.Client/Properties/launchSettings.json:
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:14243",
      "sslPort": 44327
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "inspectUri": "{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}",
      "applicationUrl": "http://localhost:5023",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "inspectUri": "{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}",
      "applicationUrl": "https://localhost:7210;http://localhost:5023",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "inspectUri": "{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

BitMove.Server/WeatherForecast.cs:
namespace BitMove.Server
{
    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}

BitMove.Server/appsettings.json:
{
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*",
    "ConnectionStrings": {
        "BitMoveDb": "Server=(localdb)\\mssqllocaldb;Database=BitMoveDb;Trusted_Connection=True;MultipleActiveResultSets=true"
    }
}
BitMove.Server/BitMoveDbContext.cs:
﻿using BitMove.Shared.Models;
using Microsoft.EntityFrameworkCore;

namespace BitMove.Server
{
    public class BitMoveDbContext : DbContext
    {
        public BitMoveDbContext(DbContextOptions<BitMoveDbContext> options) : base(options) { }

        public DbSet<JobOrder> JobOrders { get; set; }
        public DbSet<TaskAssignment> TaskAssignments { get; set; }
        public DbSet<Machine> Machines { get; set; }
        public DbSet<MaterialRequest> MaterialRequests { get; set; }
        public DbSet<SafetyCheck> SafetyChecks { get; set; }
        public DbSet<IncidentReport> IncidentReports { get; set; }
    }
}
BitMove.Server/appsettings.Development.json:
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

BitMove.Server/BitMove.Server.csproj:
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\BitMove.Shared\BitMove.Shared.csproj" />
  </ItemGroup>

</Project>

BitMove.Server/Program.cs:
using BitMove.Server;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Configura il DbContext
builder.Services.AddDbContext<BitMoveDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("BitMoveDb"))); 

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Configurazione CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowBlazorClient", policy =>
    {
        policy.WithOrigins("https://localhost:7024") // URL del client Blazor
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});


var app = builder.Build();

// Applica le migrazioni al database all'avvio
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<BitMoveDbContext>();
    dbContext.Database.Migrate();
}

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors("AllowBlazorClient"); // Abilita CORS *prima* di UseAuthorization
app.UseAuthorization();
app.MapControllers();

app.Run();
BitMove.Server/Properties/launchSettings.json:
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:2719",
      "sslPort": 44331
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5261",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7071;http://localhost:5261",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

BitMove.Server/Controllers/IncidentReportsController.cs:
﻿using BitMove.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace BitMove.Server.Controllers
{
    // Definisce la route base per questo controller come "api/IncidentReports"
    [Route("api/[controller]")]
    [ApiController]
    public class IncidentReportsController : ControllerBase
    {
        // Campo privato per il contesto del database
        private readonly BitMoveDbContext _context;

        // Costruttore che accetta un contesto del database e lo assegna al campo privato
        public IncidentReportsController(BitMoveDbContext context)
        {
            _context = context;
        }

        // Metodo per ottenere tutti gli IncidentReports
        [HttpGet]
        public async Task<ActionResult<List<IncidentReport>>> GetIncidentReports()
        {
            // Restituisce tutti i rapporti di incidente dal database
            return await _context.IncidentReports.ToListAsync();
        }

        // Metodo per ottenere un singolo IncidentReport per ID
        [HttpGet("{id}")]
        public async Task<ActionResult<IncidentReport>> GetIncidentReport(int id)
        {
            // Trova l'IncidentReport specificato per ID
            var incidentReport = await _context.IncidentReports.FindAsync(id);

            // Se l'IncidentReport non esiste, restituisce NotFound
            if (incidentReport == null)
            {
                return NotFound();
            }

            // Restituisce l'IncidentReport trovato
            return incidentReport;
        }

        // Metodo per creare un nuovo IncidentReport
        [HttpPost]
        public async Task<ActionResult<IncidentReport>> CreateIncidentReport(IncidentReport incidentReport)
        {
            // Aggiunge il nuovo IncidentReport al contesto del database
            _context.IncidentReports.Add(incidentReport);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce una risposta CreatedAtAction con il nuovo IncidentReport
            return CreatedAtAction("GetIncidentReport", new { id = incidentReport.Id }, incidentReport);
        }

        // Metodo per aggiornare un IncidentReport esistente
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateIncidentReport(int id, IncidentReport incidentReport)
        {
            // Verifica che l'ID nella richiesta corrisponda all'ID dell'IncidentReport
            if (id != incidentReport.Id)
            {
                return BadRequest();
            }

            // Segna l'IncidentReport come modificato nel contesto del database
            _context.Entry(incidentReport).State = EntityState.Modified;

            try
            {
                // Tenta di salvare le modifiche nel database
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Se l'IncidentReport non esiste, restituisce NotFound
                if (!IncidentReportExists(id))
                {
                    return NotFound();
                }
                else
                {
                    // Rilancia l'eccezione se si verifica un altro errore
                    throw;
                }
            }

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo per eliminare un IncidentReport esistente
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteIncidentReport(int id)
        {
            // Trova l'IncidentReport specificato per ID
            var incidentReport = await _context.IncidentReports.FindAsync(id);

            // Se l'IncidentReport non esiste, restituisce NotFound
            if (incidentReport == null)
            {
                return NotFound();
            }

            // Rimuove l'IncidentReport dal contesto del database
            _context.IncidentReports.Remove(incidentReport);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo privato per verificare se un IncidentReport esiste nel database
        private bool IncidentReportExists(int id)
        {
            return _context.IncidentReports.Any(e => e.Id == id);
        }
    }
}
BitMove.Server/Controllers/SafetyChecksController.cs:
﻿using BitMove.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace BitMove.Server.Controllers
{
    // Definisce la route base per questo controller come "api/SafetyChecks"
    [Route("api/[controller]")]
    [ApiController]
    public class SafetyChecksController : ControllerBase
    {
        // Campo privato per il contesto del database
        private readonly BitMoveDbContext _context;

        // Costruttore che accetta un contesto del database e lo assegna al campo privato
        public SafetyChecksController(BitMoveDbContext context)
        {
            _context = context;
        }

        // Metodo per ottenere tutte le SafetyChecks
        [HttpGet]
        public async Task<ActionResult<List<SafetyCheck>>> GetSafetyChecks()
        {
            // Restituisce tutte le verifiche di sicurezza dal database
            return await _context.SafetyChecks.ToListAsync();
        }

        // Metodo per ottenere una singola SafetyCheck per ID
        [HttpGet("{id}")]
        public async Task<ActionResult<SafetyCheck>> GetSafetyCheck(int id)
        {
            // Trova la SafetyCheck specificata per ID
            var safetyCheck = await _context.SafetyChecks.FindAsync(id);

            // Se la SafetyCheck non esiste, restituisce NotFound
            if (safetyCheck == null)
            {
                return NotFound();
            }

            // Restituisce la SafetyCheck trovata
            return safetyCheck;
        }

        // Metodo per creare una nuova SafetyCheck
        [HttpPost]
        public async Task<ActionResult<SafetyCheck>> CreateSafetyCheck(SafetyCheck safetyCheck)
        {
            // Aggiunge la nuova SafetyCheck al contesto del database
            _context.SafetyChecks.Add(safetyCheck);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce una risposta CreatedAtAction con la nuova SafetyCheck
            return CreatedAtAction("GetSafetyCheck", new { id = safetyCheck.Id }, safetyCheck);
        }

        // Metodo per aggiornare una SafetyCheck esistente
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateSafetyCheck(int id, SafetyCheck safetyCheck)
        {
            // Verifica che l'ID nella richiesta corrisponda all'ID della SafetyCheck
            if (id != safetyCheck.Id)
            {
                return BadRequest();
            }

            // Segna la SafetyCheck come modificata nel contesto del database
            _context.Entry(safetyCheck).State = EntityState.Modified;

            try
            {
                // Tenta di salvare le modifiche nel database
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Se la SafetyCheck non esiste, restituisce NotFound
                if (!SafetyCheckExists(id))
                {
                    return NotFound();
                }
                else
                {
                    // Rilancia l'eccezione se si verifica un altro errore
                    throw;
                }
            }

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo per eliminare una SafetyCheck esistente
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteSafetyCheck(int id)
        {
            // Trova la SafetyCheck specificata per ID
            var safetyCheck = await _context.SafetyChecks.FindAsync(id);

            // Se la SafetyCheck non esiste, restituisce NotFound
            if (safetyCheck == null)
            {
                return NotFound();
            }

            // Rimuove la SafetyCheck dal contesto del database
            _context.SafetyChecks.Remove(safetyCheck);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo privato per verificare se una SafetyCheck esiste nel database
        private bool SafetyCheckExists(int id)
        {
            return _context.SafetyChecks.Any(e => e.Id == id);
        }
    }
}
BitMove.Server/Controllers/JobOrdersController.cs:
﻿using BitMove.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace BitMove.Server.Controllers
{
    // Definisce la route base per questo controller come "api/JobOrders"
    [Route("api/[controller]")]
    [ApiController]
    public class JobOrdersController : ControllerBase
    {
        // Campo privato per il contesto del database
        private readonly BitMoveDbContext _context;

        // Costruttore che accetta un contesto del database e lo assegna al campo privato
        public JobOrdersController(BitMoveDbContext context)
        {
            _context = context;
        }

        // Metodo per ottenere tutte le JobOrders
        [HttpGet]
        public async Task<ActionResult<List<JobOrder>>> GetJobOrders()
        {
            // Include le attività associate a ciascuna JobOrder
            return await _context.JobOrders.Include(j => j.Tasks).ToListAsync();
        }

        // Metodo per ottenere una singola JobOrder per ID
        [HttpGet("{id}")]
        public async Task<ActionResult<JobOrder>> GetJobOrder(int id)
        {
            // Trova la JobOrder specificata per ID, includendo le attività associate
            var jobOrder = await _context.JobOrders.Include(j => j.Tasks).FirstOrDefaultAsync(j => j.Id == id);

            // Se la JobOrder non esiste, restituisce NotFound
            if (jobOrder == null)
            {
                return NotFound();
            }

            // Restituisce la JobOrder trovata
            return jobOrder;
        }

        // Metodo per creare una nuova JobOrder
        [HttpPost]
        public async Task<ActionResult<JobOrder>> CreateJobOrder(JobOrder jobOrder)
        {
            // Aggiunge la nuova JobOrder al contesto del database
            _context.JobOrders.Add(jobOrder);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce una risposta CreatedAtAction con la nuova JobOrder
            return CreatedAtAction("GetJobOrder", new { id = jobOrder.Id }, jobOrder);
        }

        // Metodo per aggiornare una JobOrder esistente
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateJobOrder(int id, JobOrder jobOrder)
        {
            // Verifica che l'ID nella richiesta corrisponda all'ID della JobOrder
            if (id != jobOrder.Id)
            {
                return BadRequest();
            }

            // Segna la JobOrder come modificata nel contesto del database
            _context.Entry(jobOrder).State = EntityState.Modified;

            try
            {
                // Tenta di salvare le modifiche nel database
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Se la JobOrder non esiste, restituisce NotFound
                if (!JobOrderExists(id))
                {
                    return NotFound();
                }
                else
                {
                    // Rilancia l'eccezione se si verifica un altro errore
                    throw;
                }
            }

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo per eliminare una JobOrder esistente
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteJobOrder(int id)
        {
            // Trova la JobOrder specificata per ID
            var jobOrder = await _context.JobOrders.FindAsync(id);
            // Se la JobOrder non esiste, restituisce NotFound
            if (jobOrder == null)
            {
                return NotFound();
            }

            // Rimuove la JobOrder dal contesto del database
            _context.JobOrders.Remove(jobOrder);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo privato per verificare se una JobOrder esiste nel database
        private bool JobOrderExists(int id)
        {
            return _context.JobOrders.Any(e => e.Id == id);
        }
    }
}
BitMove.Server/Controllers/WeatherForecastController.cs:
using Microsoft.AspNetCore.Mvc;

namespace BitMove.Server.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        [HttpGet(Name = "GetWeatherForecast")]
        public IEnumerable<WeatherForecast> Get()
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }
}

BitMove.Server/Controllers/TaskAssignmentsController.cs:
﻿using BitMove.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace BitMove.Server.Controllers
{
    // Definisce la route base per questo controller come "api/TaskAssignments"
    [Route("api/[controller]")]
    [ApiController]
    public class TaskAssignmentsController : ControllerBase
    {
        // Campo privato per il contesto del database
        private readonly BitMoveDbContext _context;

        // Costruttore che accetta un contesto del database e lo assegna al campo privato
        public TaskAssignmentsController(BitMoveDbContext context)
        {
            _context = context;
        }

        // Metodo per ottenere tutte le TaskAssignments
        [HttpGet]
        public async Task<ActionResult<List<TaskAssignment>>> GetTaskAssignments()
        {
            // Include le richieste di materiale associate a ciascuna TaskAssignment
            return await _context.TaskAssignments.Include(t => t.MaterialRequests).ToListAsync();
        }

        // Metodo per ottenere una singola TaskAssignment per ID
        [HttpGet("{id}")]
        public async Task<ActionResult<TaskAssignment>> GetTaskAssignment(int id)
        {
            // Trova la TaskAssignment specificata per ID, includendo le richieste di materiale associate
            var taskAssignment = await _context.TaskAssignments.Include(t => t.MaterialRequests).FirstOrDefaultAsync(t => t.Id == id);

            // Se la TaskAssignment non esiste, restituisce NotFound
            if (taskAssignment == null)
            {
                return NotFound();
            }

            // Restituisce la TaskAssignment trovata
            return taskAssignment;
        }

        // Metodo per creare una nuova TaskAssignment
        [HttpPost]
        public async Task<ActionResult<TaskAssignment>> CreateTaskAssignment(TaskAssignment taskAssignment)
        {
            // Aggiunge la nuova TaskAssignment al contesto del database
            _context.TaskAssignments.Add(taskAssignment);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce una risposta CreatedAtAction con la nuova TaskAssignment
            return CreatedAtAction("GetTaskAssignment", new { id = taskAssignment.Id }, taskAssignment);
        }

        // Metodo per aggiornare una TaskAssignment esistente
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateTaskAssignment(int id, TaskAssignment taskAssignment)
        {
            // Verifica che l'ID nella richiesta corrisponda all'ID della TaskAssignment
            if (id != taskAssignment.Id)
            {
                return BadRequest();
            }

            // Segna la TaskAssignment come modificata nel contesto del database
            _context.Entry(taskAssignment).State = EntityState.Modified;

            try
            {
                // Tenta di salvare le modifiche nel database
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Se la TaskAssignment non esiste, restituisce NotFound
                if (!TaskAssignmentExists(id))
                {
                    return NotFound();
                }
                else
                {
                    // Rilancia l'eccezione se si verifica un altro errore
                    throw;
                }
            }

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo per eliminare una TaskAssignment esistente
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteTaskAssignment(int id)
        {
            // Trova la TaskAssignment specificata per ID
            var taskAssignment = await _context.TaskAssignments.FindAsync(id);
            // Se la TaskAssignment non esiste, restituisce NotFound
            if (taskAssignment == null)
            {
                return NotFound();
            }

            // Rimuove la TaskAssignment dal contesto del database
            _context.TaskAssignments.Remove(taskAssignment);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo privato per verificare se una TaskAssignment esiste nel database
        private bool TaskAssignmentExists(int id)
        {
            return _context.TaskAssignments.Any(e => e.Id == id);
        }
    }
}
BitMove.Server/Controllers/MachinesController.cs:
﻿using BitMove.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace BitMove.Server.Controllers
{
    // Definisce la route base per questo controller come "api/Machines"
    [Route("api/[controller]")]
    [ApiController]
    public class MachinesController : ControllerBase
    {
        // Campo privato per il contesto del database
        private readonly BitMoveDbContext _context;

        // Costruttore che accetta un contesto del database e lo assegna al campo privato
        public MachinesController(BitMoveDbContext context)
        {
            _context = context;
        }

        // Metodo per ottenere tutte le Machines
        [HttpGet]
        public async Task<ActionResult<List<Machine>>> GetMachines()
        {
            // Restituisce tutte le macchine dal database
            return await _context.Machines.ToListAsync();
        }

        // Metodo per ottenere una singola Machine per ID
        [HttpGet("{id}")]
        public async Task<ActionResult<Machine>> GetMachine(int id)
        {
            // Trova la Machine specificata per ID
            var machine = await _context.Machines.FindAsync(id);

            // Se la Machine non esiste, restituisce NotFound
            if (machine == null)
            {
                return NotFound();
            }

            // Restituisce la Machine trovata
            return machine;
        }

        // Metodo per creare una nuova Machine
        [HttpPost]
        public async Task<ActionResult<Machine>> CreateMachine(Machine machine)
        {
            // Aggiunge la nuova Machine al contesto del database
            _context.Machines.Add(machine);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce una risposta CreatedAtAction con la nuova Machine
            return CreatedAtAction("GetMachine", new { id = machine.Id }, machine);
        }

        // Metodo per aggiornare una Machine esistente
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateMachine(int id, Machine machine)
        {
            // Verifica che l'ID nella richiesta corrisponda all'ID della Machine
            if (id != machine.Id)
            {
                return BadRequest();
            }

            // Segna la Machine come modificata nel contesto del database
            _context.Entry(machine).State = EntityState.Modified;

            try
            {
                // Tenta di salvare le modifiche nel database
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Se la Machine non esiste, restituisce NotFound
                if (!MachineExists(id))
                {
                    return NotFound();
                }
                else
                {
                    // Rilancia l'eccezione se si verifica un altro errore
                    throw;
                }
            }

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo per eliminare una Machine esistente
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteMachine(int id)
        {
            // Trova la Machine specificata per ID
            var machine = await _context.Machines.FindAsync(id);
            // Se la Machine non esiste, restituisce NotFound
            if (machine == null)
            {
                return NotFound();
            }

            // Rimuove la Machine dal contesto del database
            _context.Machines.Remove(machine);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo privato per verificare se una Machine esiste nel database
        private bool MachineExists(int id)
        {
            return _context.Machines.Any(e => e.Id == id);
        }
    }
}
BitMove.Server/Controllers/MaterialRequestsController.cs:
﻿using BitMove.Shared.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace BitMove.Server.Controllers
{
    // Definisce la route base per questo controller come "api/MaterialRequests"
    [Route("api/[controller]")]
    [ApiController]
    public class MaterialRequestsController : ControllerBase
    {
        // Campo privato per il contesto del database
        private readonly BitMoveDbContext _context;

        // Costruttore che accetta un contesto del database e lo assegna al campo privato
        public MaterialRequestsController(BitMoveDbContext context)
        {
            _context = context;
        }

        // Metodo per ottenere tutte le MaterialRequests
        [HttpGet]
        public async Task<ActionResult<List<MaterialRequest>>> GetMaterialRequests()
        {
            // Restituisce tutte le richieste di materiale dal database
            return await _context.MaterialRequests.ToListAsync();
        }

        // Metodo per ottenere una singola MaterialRequest per ID
        [HttpGet("{id}")]
        public async Task<ActionResult<MaterialRequest>> GetMaterialRequest(int id)
        {
            // Trova la MaterialRequest specificata per ID
            var materialRequest = await _context.MaterialRequests.FindAsync(id);

            // Se la MaterialRequest non esiste, restituisce NotFound
            if (materialRequest == null)
            {
                return NotFound();
            }

            // Restituisce la MaterialRequest trovata
            return materialRequest;
        }

        // Metodo per creare una nuova MaterialRequest
        [HttpPost]
        public async Task<ActionResult<MaterialRequest>> CreateMaterialRequest(MaterialRequest materialRequest)
        {
            // Aggiunge la nuova MaterialRequest al contesto del database
            _context.MaterialRequests.Add(materialRequest);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce una risposta CreatedAtAction con la nuova MaterialRequest
            return CreatedAtAction("GetMaterialRequest", new { id = materialRequest.Id }, materialRequest);
        }

        // Metodo per aggiornare una MaterialRequest esistente
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateMaterialRequest(int id, MaterialRequest materialRequest)
        {
            // Verifica che l'ID nella richiesta corrisponda all'ID della MaterialRequest
            if (id != materialRequest.Id)
            {
                return BadRequest();
            }

            // Segna la MaterialRequest come modificata nel contesto del database
            _context.Entry(materialRequest).State = EntityState.Modified;

            try
            {
                // Tenta di salvare le modifiche nel database
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Se la MaterialRequest non esiste, restituisce NotFound
                if (!MaterialRequestExists(id))
                {
                    return NotFound();
                }
                else
                {
                    // Rilancia l'eccezione se si verifica un altro errore
                    throw;
                }
            }

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo per eliminare una MaterialRequest esistente
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteMaterialRequest(int id)
        {
            // Trova la MaterialRequest specificata per ID
            var materialRequest = await _context.MaterialRequests.FindAsync(id);

            // Se la MaterialRequest non esiste, restituisce NotFound
            if (materialRequest == null)
            {
                return NotFound();
            }

            // Rimuove la MaterialRequest dal contesto del database
            _context.MaterialRequests.Remove(materialRequest);
            // Salva le modifiche nel database
            await _context.SaveChangesAsync();

            // Restituisce NoContent per indicare che l'operazione è andata a buon fine
            return NoContent();
        }

        // Metodo privato per verificare se una MaterialRequest esiste nel database
        private bool MaterialRequestExists(int id)
        {
            return _context.MaterialRequests.Any(e => e.Id == id);
        }
    }
}
BitMove.Shared/BitMove.Shared.csproj:
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>

BitMove.Shared/Class1.cs:
﻿namespace BitMove.Shared
{
    public class Class1
    {

    }
}

BitMove.Shared/Models/JobOrder.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BitMove.Shared.Models
{
    public class JobOrder
    {
        public int Id { get; set; }
        public string ClientName { get; set; }
        public string Description { get; set; }
        public DateTime DueDate { get; set; }
        public string OrderStatus { get; set; } // Es. "Aperta", "In corso", "Completata"
        public List<TaskAssignment> Tasks { get; set; } = new(); // Lista di Task da completare
    }
}

BitMove.Shared/Models/TaskAssignment.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BitMove.Shared.Models
{
    public class TaskAssignment
    {
        public int Id { get; set; }
        public int JobOrderId { get; set; }
        public string Description { get; set; }
        public TimeSpan EstimatedDuration { get; set; }
        public DateTime? StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public string OperatorId { get; set; }
        public string TaskStatus { get; set; } // Es. "Assegnata", "In corso", "Completata"
        public List<MaterialRequest> MaterialRequests { get; set; } = new();
    }
}

BitMove.Shared/Models/IncidentReport.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BitMove.Shared.Models
{
    public class IncidentReport
    {
        public int Id { get; set; }
        public string OperatorId { get; set; }
        public DateTime ReportTime { get; set; }
        public string Description { get; set; }
        public string Severity { get; set; }  // Es. "Lieve", "Moderata", "Grave"
        public string Location { get; set; }
    }
}

BitMove.Shared/Models/SafetyCheck.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BitMove.Shared.Models
{
    public class SafetyCheck
    {
        public int Id { get; set; }
        public string OperatorId { get; set; }
        public DateTime CheckTime { get; set; }
        public bool DPICheck { get; set; }
        public bool MachineCheck { get; set; }
        public string Notes { get; set; }

    }
}

BitMove.Shared/Models/MaterialRequest.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BitMove.Shared.Models
{
    public class MaterialRequest
    {
        public int Id { get; set; }
        public int TaskAssignmentId { get; set; }
        public string MaterialName { get; set; }
        public int Quantity { get; set; }
        public string UnitOfMeasure { get; set; } // Es. "kg", "m", "pz"
        public bool IsApproved { get; set; }
    }
}

BitMove.Shared/Models/Machine.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BitMove.Shared.Models
{
    public class Machine
    {
        public int Id { get; set; }
        public string Model { get; set; }
        public string SerialNumber { get; set; }
        public string Status { get; set; }  // Es. "Disponibile", "In Manutenzione", "Guasto"
        public DateTime? LastMaintenance { get; set; }
    }
}
